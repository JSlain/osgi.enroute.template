<?xml version="1.0" encoding="UTF-8"?>
<project name="template" default="none">
    <!--
         WARNING!!!

         This file is maintained automatically by Bndtools! You should not edit it directly.
         Instead, insert overrides into build.xml as follows:

         <target name="compile" depends="init">
            <echo message="This task executed before compilation..."/>
            <antcall target="template.compile"/>
            <echo message="This task executed after compilation."/>
         </target>
    -->


    <!--
         Default Target
    -->
    <target name="none">
        <fail message="This ant script should never be called directly." />
    </target>


    <!--
         INIT

         All other targets depend on init.
         It's purpose is to set up the environment only once and avoid it being repeated for each antcall.
    -->
	
	
    <target name="init" unless="initialized">
    	
		<antversion property="initialized" atleast="1.8" />
		<fail unless="initialized" message="Ant version is not at least 1.8" />		
			
		<!-- Initialise some basic properties -->
		<local name="workspacedir" />
		<local name="projectdir" />
		<local name="bnd.url" />
		<local name="bnd.location" />
			
		<tstamp>
			<format property="NOW" pattern="yyyyMMdd-HHmmss" timezone="UTC" />
		</tstamp>
			
		<dirname property="projectdir" file="${ant.file}" />
		<dirname property="workspacedir" file="${projectdir}" />
		<property file="${workspacedir}/cnf/master.properties" />

		<!-- Define where we store bnd -->
		<mkdir dir="${workspacedir}/cnf/cache" />

		<property name="bnd.location" value="${workspacedir}/cnf/cache/biz.aQute.bnd-latest.jar" />
		<get src="${bnd.url}" dest="${bnd.location}" verbose="false" skipexisting="true" />

		<path id="bnd-classpath" location="${bnd.location}" />
		<taskdef resource="aQute/bnd/ant/taskdef.properties" classpathref="bnd-classpath" />

		<!-- Load bnd and prepare the workspace -->
		<bndprepare basedir="${projectdir}" print="false" top="${release.dir}" />

		<condition property="testDirExists">
			<available file="${basedir}/test" type="dir" />
		</condition>

        <fileset dir="${project}" id="srcjavafiles">
            <include name="${src}/**/*.java"/>
        </fileset>
        <pathconvert refid="srcjavafiles" property="srcjavafiles.present" setonempty="false"/>

        <fileset dir="${project}" id="testjavafiles">
            <include name="${testsrc}/**/*.java"/>
        </fileset>
        <pathconvert refid="testjavafiles" property="testjavafiles.present" setonempty="false"/>

        <!-- Create a marker property to indicate that initialisation has been completed -->
        <property name="initialized" value="set" />
        <echo message="Enter project ${project.name}"/>
    </target>


    <!--
        DEPENDENCIES

        Build project dependencies.
    -->
    <target name="dependencies" depends="init" if="project.dependson" unless="donotrecurse">
        <subant target="build" inheritAll="false" buildpath="${project.dependson}">
            <property name="donotrecurse" value="true" />
        </subant>
    </target>


    <!--
         COMPILE

         Compile the sources.
    -->
    <target name="compile" depends="dependencies" if="srcjavafiles.present">
        <mkdir dir="${bin}"/>
        <javac fork="yes" executable="${javac}" srcdir="${src}" destdir="${bin}" classpath="${project.buildpath}" bootclasspath="${project.bootclasspath}" deprecation="true" listfiles="true" target="${javac.target}" source="${javac.source}" debug="${javac.debug}" includeAntRuntime="no" verbose="${verbose}" />
        <!--
          The eclipse compiler copies resources but the Javac compiler does not
          If ${src} == ${bin} then this is not necessary, but unfortunately, now
          it is.
        -->
        <copy todir="${bin}" verbose="${verbose}" preservelastmodified="true">
            <fileset dir="${src}">
                <exclude name="**/*.java" />
                <exclude name="**/*.class" />
            </fileset>
        </copy>
    </target>


    <!--
        BUILD

        Build the project after building its dependencies.
    -->
    <target name="build" depends="compile">
        <mkdir dir="${target}"/>
        <bnd command="build" exceptions="true" basedir="${project}" />
    </target>


    <!--
        JUNIT

        Run the junit test if present and no disabled by the no.junit property.
    -->
    <target name="compileTests" depends="init,build" if="testjavafiles.present" unless="no.junit">
        <mkdir dir="${testbin}"/>
        <javac fork="yes" executable="${javac}" srcdir="${testsrc}" destdir="${testbin}" classpath="${project.buildpath}:${project.testpath}" bootclasspath="${project.bootclasspath}" deprecation="true" listfiles="true" target="${javac.target}" source="${javac.source}" debug="${javac.debug}" includeAntRuntime="no" verbose="${verbose}" />
        <!--
          The eclipse compiler copies resources but the Javac compiler does not
          If ${src} == ${bin} then this is not necessary, but unfortunately, now
          it is.
        -->
        <copy todir="${testbin}" verbose="${verbose}" preservelastmodified="true">
            <fileset dir="${testsrc}">
                <exclude name="**/*.java" />
                <exclude name="**/*.class" />
            </fileset>
        </copy>
    </target>

    <target name="junit" depends="init,compileTests" if="testjavafiles.present" unless="no.junit">
        <junit showoutput="false" printsummary="true" failureproperty='stop' errorproperty='stop' fork="true" dir="${basedir}">
            <assertions>
                <enable />
            </assertions>
            <classpath path="${project.buildpath}:${testbin}/" />
            <formatter type="xml"/>
            <batchtest todir="${target}">
                <fileset dir="${testsrc}">
                    <include name="**/*.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>


    <!--
         TEST
    -->
    <target name="test" depends="compile">
        <bndtest/>
    </target>


    <!--
        RELEASE

        Run the bnd release task on the project and its dependencies.
    -->
    <target name="_release" depends="init">
        <bndrelease/>
    </target>

    <target name="release" depends="build">
        <subant target="_release" inheritAll="false" buildpath="${project.dependson}">
            <property name="donotrecurse" value="true" />
        </subant>
    </target>


    <!--
         CLEAN

         Clean up the project.
    -->
    <target name="clean" depends="init">
        <bnd command="clean" exceptions="true" basedir="${project}" />
        <delete dir="${bin}"/>
        <delete dir="${testbin}"/>
        <delete dir="${target}"/>
    </target>

    <target name="deepclean" depends="init,clean" if="project.dependson">
        <subant target="clean" inheritAll="false" buildpath="${project.dependson}" />
    </target>


    <!--
         JAVADOC

         Generate javadoc
    -->
    <target name="javadoc" depends="init,build" if="srcjavafiles.present">
        <javadoc
            sourcepath="${src}"
            destdir="${target}/javadoc"
            maxmemory="256M"
            classpath="${project.buildpath}"
            bootclasspath="${project.bootclasspath}"
            access="private"
            version="true"
            use="true"
            author="true"
            splitindex="true"
            windowtitle="${project.name}"
            doctitle="${project.name}"
            nodeprecated="false"
            nodeprecatedlist="false"
            notree="false"
            noindex="false"
            nohelp="false"
            nonavbar="false"
            source="${javac.source}"
        />
    </target>


    <!--
         ECHO

         Print some settings
    -->
    <target name="echo" depends="init">
        <bnd command="debug" exceptions="true" basedir="${project}" />
    </target>
</project>
